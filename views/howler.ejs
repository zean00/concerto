<script src="js/howler.js" type="text/javascript"></script>
<script>
 io.sails.url = "http://localhost:1337";
 var socket = io.connect();
 kinda_ntp.init(socket);
 var ready = false;
 // Calculated server local time.
 var time = kinda_ntp.time();
 socket.on('message', function (data) {
   kinda_ntp.resync();
   time = kinda_ntp.time();
   var sync = kinda_ntp.time();
   var delta = parseFloat(data.time) - parseFloat(time);
   var pnow = window.performance.now();
   console.log('delta ' + delta);
   console.log('pnow ' + pnow);
   if(data.cmd=='start'){
     for(var i=0;;i++){
       //st = kinda_ntp.time();
       //if(st>=data.time){
       var nnow = window.performance.now();
       if(nnow-pnow>=delta){
         if(ready)sound.play();
         var delta2 = nnow-pnow;
         var executed = (parseFloat(time) + delta2);
         display = 'time executed : ' + executed + '\n, time scheduled : ' + data.time + '\n, time diff : ' + (executed - parseFloat(data.time))  + ' ms';
         display += '\n, counter : ' + i;
         document.getElementById('status').textContent = display;
         console.log('Time executed : ' + executed );
         console.log('time scheduled : ' + data.time);
         console.log('Time diff : ' + (executed - parseFloat(data.time))  + ' ms')
         console.log('Iteration : '  + i);
         console.log('nnow ' + nnow);
         console.log('delta2 ' + delta2);
         break;
       }
     }
   }
   if(data.cmd == 'stop'){
     sound.stop();
   }
 });
 var instruments = ['','inst01.mp3','inst02.mp3','inst03.mp3','inst04.mp3','inst05.mp3'];
 var seed;
 function getInstrument(){
   seed = Math.round(Math.random()*4);
   return [instruments[seed]];
 }
 var sound;
 /*
 var sound = new Howl({
   urls: getInstrument(),
   onload:function(){
     ready = true;
     document.getElementById('status').textContent = 'ready, sound ' + seed + ' loaded';
   },
   onplay:function(){
     document.getElementById('status').textContent = 'play';
   }
 });
 */
 var initData;
 var insNo;
 window.onload = function () {
   //io.socket.get('/player/init',function(data){
     insNo =<%= insNo %>;
     sound = new Howl({
       urls: [instruments[insNo]],
       onload:function(){
         console.log('ready');
         ready = true;
         //initData = data;
         document.getElementById('status').textContent = 'ready, sound ' + insNo + ' loaded';
       },
       onplay:function(){
         document.getElementById('status').textContent = 'play';
       }
     });

   //});
 };
 function selectsound(id){

   sound = new Howl({
     urls: [instruments[id]],
     onload:function(){
       console.log('ready');
       ready = true;
       document.getElementById('status').textContent = 'ready, sound ' + id + ' loaded';
     },
     onplay:function(){
       document.getElementById('status').textContent = 'play';
     }
   });
 }

 function prepare(){
   (new Howl({
     urls: ['E4.mp3']
   })).play();
   if(!ready)return;
   if(ready&&initData.action=='play'){
     var playTime = initData.playTime;
     var currentTime = kinda_ntp.time();
     var delta = parseFloat(currentTime) - parseFloat(playTime);
     var seek = (delta / 1000) + 5;
     var pnow = window.performance.now();
     console.log(delta);
     console.log(seek);
     for(var i=0;;i++){
       var nnow = window.performance.now();
       if(nnow-pnow>=5000){
         sound.pos(seek);
         sound.play();
         console.log('play at ' + kinda_ntp.time());
         break;
       }
     }
   }
   //sound.play();
   /*
   if(ready)return;
   io.socket.get('/player/init',function(data){
     data.insNo;
     sound = new Howl({
       urls: [instruments[data.insNo]],
       onload:function(){
         console.log('ready');
         ready = true;
         document.getElementById('status').textContent = 'ready, sound ' + data.insNo + ' loaded';
         if(data.action=='play'){
           var playTime = data.playTime;
           var currentTime = kinda_ntp.time();
           var delta = parseFloat(currentTime) - parseFloat(playTime);
           var seek = (delta / 1000) + 3;
           var pnow = window.performance.now();
           console.log(delta);
           console.log(seek);
           for(var i=0;;i++){
             var nnow = window.performance.now();
             if(nnow-pnow>=3000){
               sound.pos(seek);
               sound.play();
               console.log('play at ' + kinda_ntp.time());
               break;
             }
           }
         }
       },
       onplay:function(){
         document.getElementById('status').textContent = 'play';
       }
     });

   });
   */
 }

 (function (window){
   var
       startOffset = Date.now ? Date.now() : +(new Date)
     , performance = window.performance || {}

     , _entries = []
     , _marksIndex = {}

     , _filterEntries = function (key, value){
       var i = 0, n = _entries.length, result = [];
       for( ; i < n; i++ ){
         if( _entries[i][key] == value ){
           result.push(_entries[i]);
         }
       }
       return	result;
     }

     , _clearEntries = function (type, name){
       var i = _entries.length, entry;
       while( i-- ){
         entry = _entries[i];
         if( entry.entryType == type && (name === void 0 || entry.name == name) ){
           _entries.splice(i, 1);
         }
       }
     }
   ;


   if( !performance.now ){
     performance.now = performance.webkitNow || performance.mozNow || performance.msNow || function (){
       return (Date.now ? Date.now() : +(new Date)) - startOffset;
     };
   }


   if( !performance.mark ){
     performance.mark = performance.webkitMark || function (name){
       var mark = {
           name:			name
         , entryType:	'mark'
         , startTime:	performance.now()
         , duration:		0
       };
       _entries.push(mark);
       _marksIndex[name] = mark;
     };
   }


   if( !performance.measure ){
     performance.measure = performance.webkitMeasure || function (name, startMark, endMark){
       startMark	= _marksIndex[startMark].startTime;
       endMark		= _marksIndex[endMark].startTime;

       _entries.push({
           name:			name
         , entryType:	'measure'
         , startTime:	startMark
         , duration:		endMark - startMark
       });
     };
   }


   if( !performance.getEntriesByType ){
     performance.getEntriesByType = performance.webkitGetEntriesByType || function (type){
       return _filterEntries('entryType', type);
     };
   }


   if( !performance.getEntriesByName ){
     performance.getEntriesByName = performance.webkitGetEntriesByName || function (name){
       return _filterEntries('name', name);
     };
   }


   if( !performance.clearMarks ){
     performance.clearMarks = performance.webkitClearMarks || function (name){
       _clearEntries('mark', name);
     };
   }


   if( !performance.clearMeasures ){
     performance.clearMeasures = performance.webkitClearMeasures || function (name){
       _clearEntries('measure', name);
     };
   }


   // exports
   window.performance = performance;

   if( typeof define === 'function' && (define.amd || define.ajs) ){
     define('performance', [], function (){ return performance });
   }
 })(window);
</script>
</head>
<body>

<div style="margin-bottom: 50px; border: 0px solid #000; background: rgba(255,255,255,0.5); border-radius: 10px; float: left; width: 400px; padding-bottom: 100px; position: relative; z-index: 2;">
 <div id="status"></div>
 <div id="songNo"></div>
 <button onclick="prepare();">Join</button>
 <!--
 <button onclick="selectsound(0);">Sound 1</button>
 <button onclick="selectsound(1);">Sound 2</button>
 <button onclick="selectsound(2);">Sound 3</button>
 <button onclick="selectsound(3);">Sound 4</button>
 <button onclick="selectsound(4);">Sound 5</button>
-->
</div>
